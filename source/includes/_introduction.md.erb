# Introduction

The <%= config[:product_name] %> API allows developers to integrate shipping labels and fullfillment within their e-commerce businesses and online marketplaces. The API offers price comparison, label printing, manifest generation, transactions details and tracking features. The guideline below will help get you started. For additional help, please email us at [<%= config[:support_email] %>](mailto:<%= config[:support_email] %>).

To create an account, please visit [<%= config[:production_website_url] %>](<%= config[:production_registration_url] %>) and sign up for a free account. You'll use the same email address and password to submit API requests (see below). Before you can start printing live labels, you'll need to (1) verify your email address, (2) verify your SMS, (3) fill in your full mailing address and (4) add a valid credit card to our system.

## Carriers and Services

Currently the International Bridge Blue platform supports USPS, GSS (presorted and discounted USPS), FedEx and UPS services. We are in the process of adding more carriers and services.

## eVS vs ePostage

International Bridge is certified for both USPS eVS and USPS ePostage. By default, accounts are set up with the ePostage configuration. If you'd like to switch your account to the eVS configuration, please email us at [<%= config[:support_email] %>](mailto:<%= config[:support_email] %>).

## Discounts

For high volume shippers, please contact us for possible domestic and international rate discounts. If you are part of an organization that has USPS negotiated rates and/or if you'd like to manage organization users (for pricing and billing), some additional steps are required. Please email us at [<%= config[:support_email] %>](mailto:<%= config[:support_email] %>).

## Billing

We support several payment methods. By default, accounts are set up for "meter" payments. You can add funds to your meter using different payment methods (credit card, Paypal or by mailing us a check). As you print shipping labels via the Blue website or the Blue API, the cost of the label is deducted from your account/meter balance. You can turn on the meter auto-refill flag to ensure printing labels without any downtime. For high volume shippers who are also trusted and vetted partners, we offer invoice billing.

## Manifesting

Manifesting can be performed explicitly (for one or all unmanifested mailpieces) via the manifesting API or by using the Blue website. International Bridge manifests "on behalf of the user" at the end of the day at 11:55PM PST based on the mailpiece's postmark date. The manifest response contains a collection of several SCAN (Shipment Confirmation Acceptance Notice) forms, each with its EFN (Electronic File Number); the number of the SCAN forms depends on the induction point, destination entry and other aggregation factors.

## Refunds

Unmanifested mailpieces can be refunded immediately. For the already manifested mailpieces (whether explicitly or automatically end-of-day), refunds are approved after approximately 2 weeks, pending that the labels were never used (i.e. tracking events don't exist).

## Sandbox

The Sandbox environment will help you get started, test your requests and the API responses before you generate Production labels. To create an account on the Sandbox environment, please visit [<%= config[:sandbox_website_url] %>](<%= config[:sandbox_registration_url] %>). A full mailing address and credit card information is not required like it is in Production. You cannot induct mailpieces into the mailstream using labels generated in the Sandbox environment. There are no additional charges associated with requests in the Sandbox environment. When you are ready to generate live labels, switch the API Sandbox URL with the API Production URL. The requests (including headers) do not change.

## API Endpoints

<aside class="notice">
Sandbox: <%= config[:sandbox_api_url] %>
</aside>

<aside class="notice">
Production: <%= config[:production_api_url] %>
</aside>

## RESTful API

The API is a RESTful API that supports JSON requests and responses. HATEOAS is not supported. This documentation provides code samples and libraries for different platforms to help you get started.

Requests must include "Content-Type: application/json" in the headers. Successful responses return HTTP status code 200 and 201. Depending on the request, responses return a JSON body or not. Unsuccessful responses return HTTP status codes 4XX and 5XX with additional error details (code and message). Click [here](#errors) for details on the API errors.

## Versioning

The API version is specified in the endpoint URL. The current API version is v1.

## Authentication

All API calls must be authenticated. API uses basic HTTP authentication to authenticate user requests. The username and the password are the email and the password associated with the user's account created on the <%= config[:product_name] %> website (<%= config[:production_website_url] %>).

## Request-Response Structure and Multiple Carriers

The structure of the API has been designed to support multiple carriers, and to easily allow developers to switch between carriers while keeping common sections unchanged. For example, the address and dimensions sections are universal and their structure wouldn't change between carrier A and carrier B. Carrier specific data is passed in carrier specific attributes. For example, a USPS shipping label which includes signature confirmation is included in the usps attribute ("usps" : { ..., "services" : ["SignatureConfirmation"] }).

Responses follow the same structure. Shipping metadata which is carrier specific is returned in carrier specific attributes.

## Pagination

The RESTful routes that return array of entities are paginated. The `page_number` and `page_size` parameters can be set in the URL query parameters or in the request headers. The response headers will contain the following pagination fields: `page-count`, `page-size`, `total-count-of-items`, `current-page`.

```shell
curl -u user@email.com:password -X GET --header "Content-Type: application/json" --header "Accept: application/json" "<%= config[:production_api_url] %>/labels?request_id=123&page_number=2&page_size=10"
```

> The above command returns a response with the following HTTP headers:

```json
Current-Page: 2
Page-Count: 167
Page-Size: 10
Total-Count-Of-Items: 1667
```